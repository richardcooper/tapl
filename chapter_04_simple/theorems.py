"""Use the `Hypothesis` library to "test" various theorems from Chapter 3.

The `Hypothesis` library allows us to create a large number of random terms
from the `arith` language and check that the theorems and lemmas hold for all
of those terms.

The fact that one of these tests passes does not prove that the theorem is true.
It just says that we can't currently find a term for which the theorem is false.
In the event that Hypothesis *does* find a term which causes a test to fail,
that would disprove the theorem. (Spoiler: never going to happen.)

To run the tests use pytest. For example:
    $ pytest -v theorems.py

If you execute this module directly then it will just print out some random
example terms generated by the custom Hypothesis strategies, to give you an idea
of the terms being tested.
"""

from hypothesis import given, assume
import hypothesis.strategies as st

from arith import *
from definitions import constants, size, is_normal_form


# Custom Hypothesis Strategy which generates random boolean terms in our
# language using only `true` , `false` and `if`. These terms will always
# evaluate to either true or false.
boolean_terms = st.recursive(
    st.sampled_from((true_, false_)),
    lambda children: (
      st.builds(if_, children, children, children)
    ),
    max_leaves=200,
)


# Custom Hypothesis Strategy which generates random terms from our language
# using all of the language's constructs. Terms generated in this way are very
# likely to be evaluate to a normal form which is not a value.
terms = st.recursive(
    st.sampled_from((true_, false_, zero_)),
    lambda children: (
        st.builds(succ_, children)
      | st.builds(pred_, children)
      | st.builds(iszero_, children)
      | st.builds(if_, children, children, children)
    ),
    max_leaves=200,
)


@given(terms)
def test_constants_no_greater_than_size(term):
    """Lemma 3.3.3: The number of distinct constants in a term t is no greater than the size of t."""
    assert len(constants(term)) <= size(term)


@given(boolean_terms)
def test_all_boolean_terms_evaulate_to_values_direct(term):
    """Theorem 3.5.8 - (For boolean terms) If t is in normal form then t is a value."""
    assume(is_normal_form(term))
    assert is_value(term)


@given(terms)
def test_every_value_is_a_normal_form(term):
    """Theorem 3.5.7: Every value is in normal form."""
    assume(is_value(term))
    assert evaluate(term) == term


@given(terms)
def test_termination_of_evaluation(term):
    """Theorem 3.5.12: For every term t there is some normal form t' such that t -*> t'."""
    t_prime = evaluate(term)
    assert is_normal_form(t_prime)


@given(terms)
def test_evaluation_reduces_size_of_term(term):
    """Theorem 3.5.12's proof: Each evaluation step reduces the size of the term."""
    assume(not is_normal_form(term))
    assert size(reduce(term)) < size(term)


if __name__ == '__main__':
    term = terms.example()
    print('Example Term:', term)
    print('Evaluates to:', evaluate(term), '\n')

    term = boolean_terms.example()
    print('Example Boolean Term:', term)
    print('Evaluates to:', evaluate(term), '\n')
